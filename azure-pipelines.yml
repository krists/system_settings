# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

trigger:
- master

variables:
  CC_TEST_REPORTER_ID: 62bb05348b93ecd0bfb92bd12dbc302a9333e854b56575b4eca13b5ae29c16cd
  GIT_COMMIT_SHA: $(Build.SourceVersion)
  GIT_BRANCH: $(Build.SourceBranchName)
jobs:
  - job: test
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        rails_50:
          RAILS_VERSION: 5.0.7.2
          SQLITE3_VERSION: 1.3.13
        rails_51:
          RAILS_VERSION: 5.1.7
          SQLITE3_VERSION: 1.4.2
        rails_52:
          RAILS_VERSION: 5.2.4.4
          SQLITE3_VERSION: 1.4.2
        rails_60:
          RAILS_VERSION: 6.0.3.3
          SQLITE3_VERSION: 1.4.2
        rails_61:
          RAILS_VERSION: 6.1.4.1
          SQLITE3_VERSION: 1.4.2
        rails_70:
          RAILS_VERSION: 7.0.0
          SQLITE3_VERSION: 1.4.2
          SUBMIT_COVERAGE: true
        rails_master:
          RAILS_VERSION: master
          SQLITE3_VERSION: 1.4.2
    steps:
    - task: UseRubyVersion@0
      inputs:
        versionSpec: '~> 2.7'
    - script: |
        sudo apt-get update
        sudo apt-get install libreadline-dev libsqlite3-dev
      displayName: 'Install system dependencies'
    - script: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./bin/cc-test-reporter
        chmod +x ./bin/cc-test-reporter
      displayName: 'Download Code Climate test reporter'
      condition: 'and(succeeded(), eq(variables.SUBMIT_COVERAGE, true))'
    - script: gem update --system --no-doc
      displayName: 'Update rubygems'
    - script: |
        gem install bundler
        bundle install --retry=3 --jobs=4
      displayName: 'Install Ruby dependencies'
    - script: ./bin/rails db:create db:migrate
      displayName: 'Prepare database'
    - script: ./bin/cc-test-reporter before-build
      displayName: 'Run Code Climate before-build'
      condition: 'and(succeeded(), eq(variables.SUBMIT_COVERAGE, true))'
    - script: RAILS_ENV=test ./bin/rails test
      displayName: 'Run tests'
    - script: RAILS_ENV=test ./bin/rails app:test:system
      displayName: 'Run system tests'
    - script: |
        ./bin/cc-test-reporter format-coverage -t simplecov -d
        ./bin/cc-test-reporter upload-coverage -d
      displayName: 'Run Code Climate after-build'
      condition: 'and(succeeded(), eq(variables.SUBMIT_COVERAGE, true))'
